-- // SET UP 
CREATE USER AD1 IDENTIFIED BY 123;
GRANT EXECUTE ON DBMS_RLS TO AD1 WITH GRANT OPTION;
GRANT CREATE SESSION TO AD1 WITH ADMIN OPTION;
GRANT CREATE ANY TABLE, CREATE TRIGGER, CREATE PROCEDURE TO AD1;
GRANT ADMINISTER DATABASE TRIGGER TO AD1;
ALTER USER AD1 QUOTA UNLIMITED ON USERS;
GRANT CREATE USER TO AD1;
GRANT CREATE ROLE TO AD1;
GRANT connect, resource, dba TO AD1;

-- // CREATE TABLES, CONSTRAINTS
CREATE TABLE NHANVIEN (
    MANV      INT NOT NULL, 
    HOTEN     NVARCHAR2(30) NOT NULL, 
    NGAYSINH  DATE, 
    PHAI      NCHAR(3), 
    SDT       CHAR(10), 
    DIACHI    NVARCHAR2(50), 
    LUONG     FLOAT, 
    VAITRO    NVARCHAR2(20), 
    MADV      INT, 
    ACCOUNTNAME    VARCHAR2(30),
    CONSTRAINT NHANVIEN_PK PRIMARY KEY ( MANV ) ENABLE
);

CREATE TABLE DONVI (
    MADV   INT NOT NULL,
    TENDV  NVARCHAR2(20) NOT NULL,
    CONSTRAINT DONVI_PK PRIMARY KEY ( MADV ) ENABLE
);

ALTER TABLE NHANVIEN
ADD CONSTRAINT NHANVIEN_DONVI_FK FOREIGN KEY (MADV) REFERENCES DONVI(MADV);

CREATE TABLE BENHNHAN (
    MABN     INT NOT NULL,
    TENBN    NVARCHAR2(30) NOT NULL,
    NAMSINH  INT,
    PHAI     NCHAR(3),
    DIACHI   NVARCHAR2(50),
    SDT      CHAR(10),
    CONSTRAINT BENHNHAN_PK PRIMARY KEY ( MABN ) ENABLE
);

CREATE TABLE HOSOBENHAN (
    MAKHAMBENH       INT NOT NULL,
    NGAYKHAMBENH     DATE,
    MATT             INT,
    MABS             INT,
    MABN             INT,
    TINHTRANGBANDAU  NVARCHAR2(50),
    KETLUANCUABACSI  NVARCHAR2(50),
    CONSTRAINT HOSOBENHAN_PK PRIMARY KEY ( MAKHAMBENH ) ENABLE
);

ALTER TABLE HOSOBENHAN
ADD CONSTRAINT HOSOBENHAN_BENHNHAN_FK FOREIGN KEY (MABN) REFERENCES BENHNHAN(MABN);
ALTER TABLE HOSOBENHAN
ADD CONSTRAINT HOSOBENHAN_NHANVIEN_FK FOREIGN KEY (MABS) REFERENCES NHANVIEN(MANV);
ALTER TABLE HOSOBENHAN
ADD CONSTRAINT HOSOBENHAN_NHANVIEN_FK_1 FOREIGN KEY (MATT) REFERENCES NHANVIEN(MANV);

CREATE TABLE DICHVU (
    MADV    INT NOT NULL,
    TENDV   NVARCHAR2(30) NOT NULL,
    DONGIA  FLOAT,
    CONSTRAINT DICHVU_PK PRIMARY KEY ( MADV ) ENABLE
);

CREATE TABLE CHITIETDICHVU (
    MAKHAMBENH     INT NOT NULL,
    MADV           INT NOT NULL,
    THOIGIAN       DATE NOT NULL,
    NGUOITHUCHIEN  INT,
    KETLUAN        NVARCHAR2(30),
    CONSTRAINT CHITIETDICHVU_PK PRIMARY KEY ( MAKHAMBENH,
                                              MADV ) ENABLE
);

ALTER TABLE CHITIETDICHVU MODIFY KETLUAN NVARCHAR2(100)

ALTER TABLE CHITIETDICHVU
ADD CONSTRAINT CHITIETDICHVU_DICHVU_FK FOREIGN KEY (MADV) REFERENCES DICHVU(MADV);
ALTER TABLE CHITIETDICHVU
ADD CONSTRAINT CHITIETDICHVU_NHANVIEN_FK FOREIGN KEY (NGUOITHUCHIEN) REFERENCES NHANVIEN(MANV);

CREATE TABLE THUOC (
    MATHUOC    INT NOT NULL,
    TENTHUOC   VARCHAR2(20),
    DONVITINH  NVARCHAR2(10),
    DONGIA     FLOAT,
    LUUY       NVARCHAR2(30),
    CONSTRAINT THUOC_PK PRIMARY KEY ( MATHUOC ) ENABLE
);

CREATE TABLE DONTHUOC (
    MAKHAMBENH  INT NOT NULL,
    NVPHUTRACH  INT NOT NULL,
    CONSTRAINT DONTHUOC_PK PRIMARY KEY ( MAKHAMBENH ) ENABLE
);

ALTER TABLE DONTHUOC
ADD CONSTRAINT DONTHUOC_HOSOBENHAN_FK FOREIGN KEY (MAKHAMBENH) REFERENCES HOSOBENHAN(MAKHAMBENH);
ALTER TABLE DONTHUOC
ADD CONSTRAINT DONTHUOC_NHANVIEN_FK FOREIGN KEY (NVPHUTRACH) REFERENCES NHANVIEN(MANV);

CREATE TABLE CHITIETDONTHUOC (
    MAKHAMBENH  INT NOT NULL,
    MATHUOC     INT NOT NULL,
    SOLUONG     INT,
    LIEUDUNG    NVARCHAR2(20),
    MOTA        NVARCHAR2(20),
    CONSTRAINT CHITIETDONTHUOC_PK PRIMARY KEY ( MAKHAMBENH,
                                                MATHUOC ) ENABLE
);

ALTER TABLE CHITIETDONTHUOC
ADD CONSTRAINT CHITIETDONTHUOC_DONTHUOC_FK FOREIGN KEY (MAKHAMBENH) REFERENCES DONTHUOC(MAKHAMBENH);
ALTER TABLE CHITIETDONTHUOC
ADD CONSTRAINT CHITIETDONTHUOC_THUOC_FK FOREIGN KEY (MATHUOC) REFERENCES THUOC(MATHUOC);

CREATE TABLE HOADON (
    SOHD        INT NOT NULL,
    MAKHAMBENH  INT,
    NGAYHD      DATE,
    NVPHUTRACH  INT,
    TONGTIEN    FLOAT,
    CONSTRAINT HOADON_PK PRIMARY KEY ( SOHD ) ENABLE
);

ALTER TABLE HOADON
ADD CONSTRAINT HOADON_HOSOBENHAN_FK FOREIGN KEY (MAKHAMBENH) REFERENCES HOSOBENHAN(MAKHAMBENH);
ALTER TABLE HOADON
ADD CONSTRAINT HOADON_NHANVIEN_FK FOREIGN KEY (NVPHUTRACH) REFERENCES NHANVIEN(MANV);

CREATE TABLE CHITIETHOADON (
    SOHD  INT NOT NULL,
    MADV  INT NOT NULL,
    CONSTRAINT CHITIETHOADON_PK PRIMARY KEY ( SOHD,
                                              MADV ) ENABLE
);

ALTER TABLE CHITIETHOADON
ADD CONSTRAINT CHITIETHOADON_HOADON_FK FOREIGN KEY (SOHD) REFERENCES HOADON(SOHD);
ALTER TABLE CHITIETHOADON
ADD CONSTRAINT CHITIETHOADON_DICHVU_FK FOREIGN KEY (MADV) REFERENCES DICHVU(MADV);

CREATE TABLE CHAMCONG (
    MANV        INT NOT NULL,
    THANG       INT NOT NULL,
    SONGAYCONG  INT,
    CONSTRAINT CHAMCONG_PK PRIMARY KEY ( MANV,
                                         THANG ) ENABLE
);

ALTER TABLE CHAMCONG
ADD CONSTRAINT CHAMCONG_NHANVIEN_FK FOREIGN KEY (MANV) REFERENCES NHANVIEN(MANV);


-- // INSERT DATA
-- TABLE: BENH NHAN
INSERT INTO BENHNHAN VALUES (1, 'Andy', '2000', 'Nam', 'Tp Thu Duc', '124578');
INSERT INTO BENHNHAN VALUES (2, 'Roger', '2001', 'Nu', 'Q11', '123578');
INSERT INTO BENHNHAN VALUES (3, 'William', '2002', 'Nu', 'Q5', '126578');
INSERT INTO BENHNHAN VALUES (4, 'Michael', '2003', 'Nam', 'Q3', '121578');
INSERT INTO BENHNHAN VALUES (5, 'Jackson', '2003', 'Nam', 'Q3', '121578');
INSERT INTO BENHNHAN VALUES (6, 'Rocket', '2004', 'Nam', 'Q2', '121578');
INSERT INTO BENHNHAN VALUES (7, 'Matthew', '2002', 'Nam', 'Q2', '123456');

-- TABLE: DON VI
INSERT INTO DONVI VALUES (50, 'Khoa ngoai');
INSERT INTO DONVI VALUES (51, 'Khoa noi');
INSERT INTO DONVI VALUES (52, 'Phong tiep tan');
INSERT INTO DONVI VALUES (53, 'Phong thuoc');
INSERT INTO DONVI VALUES (54, 'Phong ke toan');
INSERT INTO DONVI VALUES (55, 'Phong tai vu');
INSERT INTO DONVI VALUES (56, 'Phong quan ly');

-- TABLE: NHAN VIEN
INSERT INTO NHANVIEN VALUES (11, 'Elizabeth', TO_DATE('1975/04/13', 'yyyy/mm/dd'), 'Nu', '000123', 'Q1', 15000000, 'Y ta', 50, 'ELIZABETH');
INSERT INTO NHANVIEN VALUES (12, 'Sherlock', TO_DATE('1986/04/15', 'yyyy/mm/dd'), 'Nam', '001123', 'Q2', 12000000, 'Y ta', 50, 'SHERLOCK');
INSERT INTO NHANVIEN VALUES (13, 'Glass', TO_DATE('1969/12/10', 'yyyy/mm/dd'), 'Nu', '020123', 'Q1', 30000000, 'Bac si', 51, 'GLASS');
INSERT INTO NHANVIEN VALUES (14, 'Haibara', TO_DATE('1995/01/29', 'yyyy/mm/dd'), 'Nu', '010123', 'Q4', 10000000, 'Phong thuoc', 53, 'HAIBARA');
INSERT INTO NHANVIEN VALUES (15, 'Conan', TO_DATE('1980/08/11', 'yyyy/mm/dd'), 'Nam', '800123', 'Q12', 18000000, 'Bac si', 50, 'CONAN');
INSERT INTO NHANVIEN VALUES (16, 'Agasa', TO_DATE('1998/02/15', 'yyyy/mm/dd'), 'Nam', '900123', 'Q8', 16000000, 'Bac si', 51, 'AGASA');
INSERT INTO NHANVIEN VALUES (17, 'Kudo', TO_DATE('1985/06/13', 'yyyy/mm/dd'), 'Nam', '500123', 'Q7', 16000000, 'Dieu phoi benh', 52, 'KUDO');
INSERT INTO NHANVIEN VALUES (18, 'Harry', TO_DATE('1975/11/13', 'yyyy/mm/dd'), 'Nam', '600123', 'Q10', 10000000, 'Ke toan', 54, 'HARRY');
INSERT INTO NHANVIEN VALUES (19, 'Long', TO_DATE('1975/11/13', 'yyyy/mm/dd'), 'Nam', '120123', 'Q10', 10000000, 'Tiep tan', 52, 'TLONG');
INSERT INTO NHANVIEN VALUES (20, 'Nhan', TO_DATE('1975/11/13', 'yyyy/mm/dd'), 'Nam', '210123', 'Q10', 10000000, 'Phong thuoc', 53, 'NHAN');
INSERT INTO NHANVIEN VALUES (21, 'Phat', TO_DATE('1975/11/13', 'yyyy/mm/dd'), 'Nam', '900123', 'Q10', 10000000, 'Tai vu', 55, 'PHAT');
INSERT INTO NHANVIEN VALUES (22, 'Trang', TO_DATE('1975/11/13', 'yyyy/mm/dd'), 'Nam', '800123', 'Q10', 10000000, 'Tai vu', 55, 'TRANG');
INSERT INTO NHANVIEN VALUES (23, 'Admin1', TO_DATE('1975/11/13', 'yyyy/mm/dd'), 'Nam', '800123', 'Q10', 10000000, 'Quan ly', 56, 'AD1'); 
INSERT INTO NHANVIEN VALUES (24, 'Thanh', TO_DATE('1975/11/13', 'yyyy/mm/dd'), 'Nam', '800125', 'Q10', 10000000, 'Tiep tan', 52, 'THANH'); 
INSERT INTO NHANVIEN VALUES (25, 'Kris', TO_DATE('1987/06/22', 'yyyy/mm/dd'), 'Nam', '369555', 'Q1', 15000000, 'Bac si', 50, 'KRIS'); 

-- UPDATE NHANVIEN SET ACCOUNTNAME = 'TLONG' WHERE MANV = 19;
-- UPDATE NHANVIEN SET VAITRO = 'Dieu phoi benh', MADV = 52 WHERE MANV = 17;
-- UPDATE NHANVIEN SET VAITRO = 'Bac si', MADV = 51 WHERE MANV = 16;

-- TABLE: DICH VU
INSERT INTO DICHVU VALUES(1001, 'Chup X quang', 500000);
INSERT INTO DICHVU VALUES(1002, 'Sieu am', 300000);
INSERT INTO DICHVU VALUES(1003, 'Xet nghiem mau', 450000);
INSERT INTO DICHVU VALUES(1004, 'Noi soi', 300000);

-- TABLE: CHI TIET DICH VU
INSERT INTO CHITIETDICHVU VALUES (400, 1001, TO_DATE('2021/04/04', 'yyyy/mm/dd'), 13, NULL);
INSERT INTO CHITIETDICHVU VALUES (401, 1001, TO_DATE('2021/04/04', 'yyyy/mm/dd'), 13, NULL);
INSERT INTO CHITIETDICHVU VALUES (403, 1001, TO_DATE('2021/04/04', 'yyyy/mm/dd'), 11,NULL );
INSERT INTO CHITIETDICHVU VALUES (402, 1001, TO_DATE('2021/04/04', 'yyyy/mm/dd'), 12, NULL);

-- TABLE: HO SO BENH AN
INSERT INTO HOSOBENHAN VALUES(400, TO_DATE('2021/04/04', 'yyyy/mm/dd'), 19, 13, 1, NULL, NULL);
INSERT INTO HOSOBENHAN VALUES(401, TO_DATE('2021/04/10', 'yyyy/mm/dd'), 19, 16, 2, NULL, NULL);
INSERT INTO HOSOBENHAN VALUES(402, TO_DATE('2021/04/06', 'yyyy/mm/dd'), 19, 15, 3, NULL, NULL);
INSERT INTO HOSOBENHAN VALUES(403, TO_DATE('2021/04/05', 'yyyy/mm/dd'), 19, 13, 4, NULL, NULL);
INSERT INTO HOSOBENHAN VALUES(404, TO_DATE('2021/06/19', 'yyyy/mm/dd'), 24, 15, 5, NULL, NULL);
INSERT INTO HOSOBENHAN VALUES(405, TO_DATE('2021/06/20', 'yyyy/mm/dd'), 24, 16, 6, NULL, NULL);
INSERT INTO HOSOBENHAN VALUES(406, TO_DATE('2021/06/30', 'yyyy/mm/dd'), 24, 24, 3, NULL, NULL);
INSERT INTO HOSOBENHAN VALUES(407, TO_DATE('2021/06/22', 'yyyy/mm/dd'), 24, 25, 7, NULL, NULL);

-- TABLE: HOA DON
INSERT INTO HOADON VALUES (1, 400,  TO_DATE('2021/04/04', 'yyyy/mm/dd'), 19, 1000000);
INSERT INTO HOADON VALUES (2, 401,  TO_DATE('2021/04/04', 'yyyy/mm/dd'), 19, 1500000);
INSERT INTO HOADON VALUES (3, 402,  TO_DATE('2021/04/06', 'yyyy/mm/dd'), 19, 1000000);
INSERT INTO HOADON VALUES (4, 403,  TO_DATE('2021/04/05', 'yyyy/mm/dd'), 19, 1500000);
INSERT INTO HOADON VALUES (5, 404,  TO_DATE('2021/06/19', 'yyyy/mm/dd'), 24, 1500000);
INSERT INTO HOADON VALUES (6, 405,  TO_DATE('2021/06/20', 'yyyy/mm/dd'), 24, 1500000);
INSERT INTO HOADON VALUES (7, 405,  TO_DATE('2021/06/21', 'yyyy/mm/dd'), 19, 1500000);

-- TABLE: CHI TIET HOA DON
INSERT INTO CHITIETHOADON VALUES (1,  1001);
INSERT INTO CHITIETHOADON VALUES (2,  1001);

-- TABLE: THUOC
INSERT INTO THUOC VALUES (101, 'Panadol', 'Hop', 120000, NULL);
INSERT INTO THUOC VALUES (102, 'Paracetamol', 'Hop', 150000, NULL);
INSERT INTO THUOC VALUES (103, 'Vitamin C', 'Lo', 30000, NULL);
INSERT INTO THUOC VALUES (104, 'Cot thoai vuong', 'Hop', 100000, NULL);

-- TABLE: DON THUOC
INSERT INTO DONTHUOC VALUES (400, 20);
INSERT INTO DONTHUOC VALUES (401, 20);

-- TABLE: CHI TIET DON THUOC 
INSERT INTO CHITIETDONTHUOC VALUES (400, 101, 1, '1vien/lan, 3lan/ngay',  NULL);
INSERT INTO CHITIETDONTHUOC VALUES (401, 102, 2, '1vien/lan, 3lan/ngay',  NULL);

-- TABLE: CHAM CONG
INSERT INTO CHAMCONG VALUES (11, 1, 26);
INSERT INTO CHAMCONG VALUES (12, 1, 30);
INSERT INTO CHAMCONG VALUES (13, 1, 31);
INSERT INTO CHAMCONG VALUES (14, 1, 31);
INSERT INTO CHAMCONG VALUES (15, 1, 31);
INSERT INTO CHAMCONG VALUES (16, 1, 31);
INSERT INTO CHAMCONG VALUES (17, 1, 27);
INSERT INTO CHAMCONG VALUES (18, 1, 31);

-- =================================================== PHAN HE 1 ===================================================
-- // 1. XEM DS NGUOI DUNG TRONG HE THONG 
SELECT * FROM DBA_USERS;

SELECT * FROM DBA_ROLES;

-- // 2. THONG TIN VE QUYEN CUA MOI USER/ ROLE TREN CAC DOI TUONG DU LIEU 
-- THONG TIN CUA USER TREN CAC DOI TUONG DU LIEU
SELECT Utp.table_Name, Utp.privilege, UTP.OWNER FROM USER_TAB_PRIVS  UTP; 
-- THONG TIN QUYEN CUA ROLE TREN CAC DOI TUONG DU LIEU
SELECT Rtp.role, Rtp.table_Name, RTP.COLUMN_NAME, Rtp.grantable, Rtp.privilege FROM ROLE_TAB_PRIVS RTP; 

-- // 3. TAO MOI, XOA, SUA USER/ROLE
-- -- TAO MOI USER
GRANT CREATE USER TO AD1;
--
CREATE OR REPLACE PROCEDURE PROC_CREATE_USER
(USER_NAME IN VARCHAR2, U_PASSWORD IN VARCHAR2)
AUTHID CURRENT_USER
IS
    USERNAME VARCHAR2(30) := USER_NAME;
    UPASSWORD VARCHAR2(30) := U_PASSWORD; 
    TMP_QUERY VARCHAR2(150);
BEGIN
    TMP_QUERY := 'CREATE USER   ' || USERNAME ||  '  IDENTIFIED BY  ' || UPASSWORD;
    EXECUTE IMMEDIATE( TMP_QUERY );
    COMMIT;
END;
-- -- TAO MOI ROLE 
GRANT CREATE ROLE TO AD1;
--
CREATE OR REPLACE PROCEDURE PROC_CREATE_ROLE
(ROLE_NAME IN VARCHAR2)
IS
    ROLENAME VARCHAR2(30) := ROLE_NAME;
    TMP_QUERY VARCHAR2(150);
BEGIN
    TMP_QUERY := 'CREATE ROLE   ' || ROLENAME;
    EXECUTE IMMEDIATE( TMP_QUERY );
    COMMIT;
END;

-- // XOA USER 
--
CREATE OR REPLACE PROCEDURE  PROC_DROP_USER
(USERNAME IN VARCHAR2)
AUTHID CURRENT_USER
IS
    USER_NAME VARCHAR2(30)  := USERNAME;
    TMP_QUERY VARCHAR2(100);
BEGIN
    TMP_QUERY := 'DROP USER  ' || USER_NAME || '  CASCADE';
    EXECUTE IMMEDIATE (TMP_QUERY) ;
END;
-- // XOA ROLE
GRANT DROP ANY ROLE TO AD1;
--
CREATE OR REPLACE PROCEDURE PROC_DROP_ROLE
(ROLE_NAME IN VARCHAR2)
IS
    ROLENAME VARCHAR2(30) := ROLE_NAME;
    TMP_QUERY VARCHAR2(150);
BEGIN
    TMP_QUERY := 'DROP ROLE   ' || ROLENAME;
    EXECUTE IMMEDIATE( TMP_QUERY );
    COMMIT;
END;
-- // SUA USER
GRANT ALTER USER TO AD1;
--
CREATE OR REPLACE PROCEDURE RESET_PASS
(P_USERNAME IN VARCHAR2, P_OLDPASS VARCHAR2, P_NEWPASS VARCHAR2)
IS
    USER_NAME VARCHAR2(30) := P_USERNAME;
    OLDPASS VARCHAR2(30) :=  P_OLDPASS;
    NEWPASS VARCHAR2(30) := P_NEWPASS;
    TMP_QUERY VARCHAR2(100);
BEGIN
    TMP_QUERY := 'ALTER USER ' || USER_NAME|| ' IDENTIFIED BY ' || NEWPASS ||' REPLACE ' || OLDPASS;
    EXECUTE IMMEDIATE(TMP_QUERY);
END;
-- // SUA ROLE (CAP NHAT PASS CHO ROLE)
GRANT ALTER ANY ROLE TO AD1;
--
CREATE OR REPLACE PROCEDURE ALTER_ROLE
(ROLENAME IN VARCHAR2, PASSROLENAME IN VARCHAR2)
IS
    ROLE_NAME VARCHAR2(30) := ROLENAME;
    PASSROLE_NAME VARCHAR2(30) := PASSROLENAME;
    TMP_QUERY VARCHAR2(200);
BEGIN
    TMP_QUERY := 'ALTER ROLE ' || ROLE_NAME || ' IDENTIFIED BY ' || PASSROLE_NAME;
    EXECUTE IMMEDIATE(TMP_QUERY);
END;

-- // 4. CAP QUYEN USER/ ROLE
-- // CAP QUYEN HE THONG CHO USER
CREATE OR REPLACE PROCEDURE grant_sys_user (
    username  IN  VARCHAR2,
    privs     IN  VARCHAR2,
    flag      IN  VARCHAR2
) AS

    uname      VARCHAR2(20) := username;
    uprivs     VARCHAR2(20) := privs;
    uflag      VARCHAR2(20) := flag;
    tmp_query  VARCHAR2(100);
BEGIN
    IF uflag = 'YES' THEN
        BEGIN
            tmp_query := 'GRANT '
                         || uprivs
                         || ' TO '
                         || uname
                         || 'WITH ADMIN OPTION';
            EXECUTE IMMEDIATE ( tmp_query );
        END;
    END IF;

    IF uflag = 'NO' THEN
        BEGIN
            tmp_query := 'GRANT '
                         || uprivs
                         || ' TO '
                         || uname;
            EXECUTE IMMEDIATE ( tmp_query );
        END;

    END IF;

END;

-- // CAP QUYEN DOI TUONG CHO USER
CREATE OR REPLACE PROCEDURE grant_privs_obj_user (
    username  IN  VARCHAR2,
    privs     IN  VARCHAR2,
    objects   IN  VARCHAR2
) AS

    uname      VARCHAR2(20) := username;
    uprivs     VARCHAR2(20) := privs;
    obj        VARCHAR2(20) := objects;
    tmp_query  VARCHAR2(100);
BEGIN
    tmp_query := 'GRANT '
                 || uprivs
                 || ' ON '
                 || obj
                 || ' TO '
                 || uname;

    EXECUTE IMMEDIATE ( tmp_query );
END;

-- // CAP QUYEN HE THONG CHO ROLE 
CREATE OR REPLACE PROCEDURE grant_sys_role (
    rolename  IN  VARCHAR2,
    privs     IN  VARCHAR2,
    flag      IN  VARCHAR2
) AS

    rname      VARCHAR2(20) := rolename;
    rprivs     VARCHAR2(20) := privs;
    rflag      VARCHAR2(20) := flag;
    tmp_query  VARCHAR2(100);
BEGIN
    IF rflag = 'YES' THEN
        BEGIN
            tmp_query := 'GRANT '
                         || rprivs
                         || ' TO '
                         || rname
                         || 'WITH ADMIN OPTION';
            EXECUTE IMMEDIATE ( tmp_query );
        END;
    END IF;

    IF rflag = 'NO' THEN
        BEGIN
            tmp_query := 'GRANT '
                         || rprivs
                         || ' TO '
                         || rname;
            EXECUTE IMMEDIATE ( tmp_query );
        END;

    END IF;

END;

-- // CAP QUYEN DOI TUONG CHO ROLE
CREATE OR REPLACE PROCEDURE grant_privs_obj_role (
    rolename  IN  VARCHAR2,
    privs     IN  VARCHAR2,
    objects   IN  VARCHAR2
) AS

    rname      VARCHAR2(20) := rolename;
    rprivs     VARCHAR2(20) := privs;
    obj        VARCHAR2(20) := objects;
    tmp_query  VARCHAR2(100);
BEGIN
    tmp_query := 'GRANT '
                 || rprivs
                 || ' ON '
                 || obj
                 || ' TO '
                 || rname;

    EXECUTE IMMEDIATE ( tmp_query );
END;

-- // CAP ROLE CHO USER 
CREATE OR REPLACE PROCEDURE grant_role_to_user (
    username  IN  VARCHAR2,
    rolename  IN  VARCHAR2
) AS

    rname      VARCHAR2(20) := rolename;
    uname      VARCHAR2(20) := username;
    tmp_query  VARCHAR2(100);
BEGIN
    tmp_query := 'GRANT '
                 || rname
                 || ' TO '
                 || uname;
    EXECUTE IMMEDIATE ( tmp_query );
END;

-- // 5. CHO PHEP THU HOI QUYEN TU USER/ ROLE 
-- // THU HOI QUYEN HE THONG CUA USER
CREATE OR REPLACE PROCEDURE PROC_REVOKE_PRIVS_FROM_USER
(USERNAME IN VARCHAR2, PRIVS IN VARCHAR2)
IS
    USER_NAME VARCHAR2(30) := USERNAME;
    UPRIVILEGES VARCHAR2(50) := PRIVS;
    TMP_QUERY VARCHAR2(200);
BEGIN
    TMP_QUERY := 'REVOKE  '|| UPRIVILEGES ||  ' FROM  ' || USER_NAME;
    EXECUTE IMMEDIATE(TMP_QUERY);
END;

-- // THU HOI QUYEN DOI TUONG CUA USER
CREATE OR REPLACE PROCEDURE PROC_REVOKE_PRIVS_TABLE_FROM_USER
(USERNAME IN VARCHAR2, PRIVS IN VARCHAR2, TABLENAME IN VARCHAR2)
IS
    USER_NAME VARCHAR2(30) := USERNAME;
    UPRIVILEGES VARCHAR2(50) := PRIVS;
    TABLE_NAME VARCHAR2(30) := TABLENAME;
    TMP_QUERY VARCHAR2(200);
BEGIN
    TMP_QUERY := 'REVOKE  '|| UPRIVILEGES || ' ON AD1.' || TABLE_NAME ||  ' FROM  ' || USER_NAME;
    EXECUTE IMMEDIATE(TMP_QUERY);
END;

-- // THU HOI QUYEN HE THONG CUA ROLE
CREATE OR REPLACE PROCEDURE PROC_REVOKE_PRIVS_ROLE
(ROLENAME IN VARCHAR2, RPRIVS IN VARCHAR2)
IS
    ROLE_NAME VARCHAR2(30) := ROLENAME;
    RPRIVILEGES VARCHAR2(30) := RPRIVS;
    TMP_QUERY VARCHAR2(100);
BEGIN
    TMP_QUERY := 'REVOKE  '|| RPRIVILEGES ||  ' FROM  ' || ROLE_NAME;
    EXECUTE IMMEDIATE(TMP_QUERY);
END;

-- // THU HOI QUYEN DOI TUONG CUA ROLE
CREATE OR REPLACE PROCEDURE PROC_REVOKE_PRIVS_OBJECT_ROLE
(ROLENAME IN VARCHAR2, RPRIVS IN VARCHAR2, ROBJECT IN VARCHAR2)
IS
    ROLE_NAME VARCHAR2(30) := ROLENAME;
    RPRIVILEGES VARCHAR2(30) := RPRIVS;
    ROBJ VARCHAR2(30) := ROBJECT;
    TMP_QUERY VARCHAR2(100);
BEGIN
    TMP_QUERY := 'REVOKE  '|| RPRIVILEGES || ' ON AD1.' || ROBJ ||  ' FROM  ' || ROLE_NAME;
    EXECUTE IMMEDIATE(TMP_QUERY);
END;

-- // 6. XEM DANH SACH CAC DOI TUONG DA TAO TRONG CSDL 
-- 
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;
GRANT SELECT ANY DICTIONARY TO AD1; -- CO QUYEN NAY MOI TRUY CAO DUOC DBA_ROLES

CREATE OR REPLACE VIEW AD1.ROLE_VIEW(ROLE)
AS SELECT ROLE FROM DBA_ROLES;

CREATE OR REPLACE VIEW AD1.TABLENAME(TABLE_NAME)
AS SELECT TABLE_NAME FROM ALL_TABLES WHERE OWNER = 'AD1';

CREATE OR REPLACE VIEW AD1.VIEWNAME(VIEW_NAME)
AS SELECT VIEW_NAME FROM ALL_VIEWS WHERE OWNER = 'AD1';

-- OBJECT = USER
CREATE OR REPLACE PROCEDURE WATCH_USERS (UNAME OUT SYS_REFCURSOR)
AS
BEGIN
        OPEN UNAME FOR
        SELECT * FROM ALL_USERS;
        
        DBMS_SQL.RETURN_RESULT(UNAME);
END;

VARIABLE MYCURSOR REFCURSOR;
EXEC WATCH_USERS(:MYCURSOR);

-- OBJECT = ROLE 
CREATE OR REPLACE PROCEDURE WATCH_ROLES (RNAME OUT SYS_REFCURSOR)
AS
BEGIN
        OPEN RNAME FOR
        SELECT * FROM AD1.ROLE_VIEW;
        
        DBMS_SQL.RETURN_RESULT(RNAME);
END;

VARIABLE MYCURSOR REFCURSOR;
EXEC WATCH_ROLES(:MYCURSOR);

-- OBJECT = TABLE 
CREATE OR REPLACE PROCEDURE WATCH_TABLES (TNAME OUT SYS_REFCURSOR)
AS
BEGIN
        OPEN TNAME FOR
       SELECT * FROM AD1.TABLENAME;
        
        DBMS_SQL.RETURN_RESULT(TNAME);
END;

VARIABLE MYCURSOR REFCURSOR;
EXEC WATCH_TABLES(:MYCURSOR);

-- OBJECT = VIEW
CREATE OR REPLACE PROCEDURE WATCH_VIEWS (VNAME OUT SYS_REFCURSOR)
AS
BEGIN
        OPEN VNAME FOR
        SELECT * FROM AD1.VIEWNAME;
        
        DBMS_SQL.RETURN_RESULT(VNAME);
END;

VARIABLE MYCURSOR REFCURSOR;
EXEC WATCH_VIEWS(:MYCURSOR);
    
-- // 7. CHO PHEP CHINH SUA QUYEN CUA USER/ ROLE
    -- Quyen Doi Tuong 
CREATE OR REPLACE PROCEDURE pro_edit_privs_obj (
    name_edit     IN  VARCHAR2,
    privs_change  IN  VARCHAR2,
    obj           IN  VARCHAR2,
    flag          IN  VARCHAR2,
    privs_old     IN  VARCHAR2
) IS

    nameedit     VARCHAR2(30) := name_edit;
    privschange  VARCHAR2(30) := privs_change;
    privsold     VARCHAR2(30) := privs_old;
    obj1         VARCHAR2(30) := obj;
    flag1        VARCHAR2(30) := flag;
    tmp_query    VARCHAR2(150);
BEGIN
    IF flag1 = 'ALL' THEN
        tmp_query := 'REVOKE ALL ON '
                     || obj1
                     || 'FROM'
                     || nameedit;
        EXECUTE IMMEDIATE ( tmp_query );
    ELSIF flag1 = 'DEL' THEN
        tmp_query := 'REVOKE '
                     || privsold
                     || 'ON'
                     || obj1
                     || 'FROM'
                     || nameedit;

        EXECUTE IMMEDIATE ( tmp_query );
    ELSIF flag1 = 'INSERT' THEN
        tmp_query := 'GRANT '
                     || privschange
                     || 'ON'
                     || obj1
                     || 'TO'
                     || nameedit;

        EXECUTE IMMEDIATE ( tmp_query );
    ELSIF flag1 = 'UPDATE' THEN
        tmp_query := 'REVOKE '
                     || privsold
                     || 'ON'
                     || obj1
                     || 'FROM'
                     || nameedit;

        EXECUTE IMMEDIATE ( tmp_query );
        tmp_query := 'GRANT '
                     || privschange
                     || 'ON'
                     || obj1
                     || 'TO'
                     || nameedit;

        EXECUTE IMMEDIATE ( tmp_query );
    END IF;
END;
    -- Quyen He Thong 
CREATE OR REPLACE PROCEDURE pro_edit_privs_sys (
    name_edit     IN  VARCHAR2,
    privs_change  IN  VARCHAR2,
    flag          IN  VARCHAR2,
    privs_old     IN  VARCHAR2
) IS

    nameedit     VARCHAR2(30) := name_edit;
    privschange  VARCHAR2(30) := privs_change;
    privsold     VARCHAR2(30) := privs_old;
    flag1        VARCHAR2(30) := flag;
    tmp_query    VARCHAR2(150);
BEGIN
    IF flag1 = 'DEL' THEN
        tmp_query := 'REVOKE '
                     || privsold
                     || ' FROM '
                     || nameedit;
        EXECUTE IMMEDIATE ( tmp_query );
    ELSIF flag1 = 'INSERT' THEN
        tmp_query := 'GRANT '
                     || privschange
                     || ' TO '
                     || nameedit;
        EXECUTE IMMEDIATE ( tmp_query );
    ELSIF flag1 = 'UPDATE' THEN
        tmp_query := 'REVOKE '
                     || privsold
                     || ' FROM '
                     || nameedit;
        EXECUTE IMMEDIATE ( tmp_query );
        tmp_query := 'GRANT '
                     || privschange
                     || ' TO '
                     || nameedit;
        EXECUTE IMMEDIATE ( tmp_query );
    END IF;
END;

-- // 8. CHO PHEP XEM QUYEN CUA MOT CHU THE 
CREATE OR REPLACE VIEW WATCH_USERS_PRIVS_OBJECT
AS SELECT GRANTEE, OWNER, TABLE_NAME, GRANTOR, PRIVILEGE, TYPE FROM DBA_TAB_PRIVS;

CREATE OR REPLACE VIEW WATCH_USERS_PRIVS_SYS
AS SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS;

CREATE OR REPLACE VIEW WATCH_ROLES_PRIVS_SYS
AS SELECT ROLE, PRIVILEGE FROM ROLE_SYS_PRIVS;

CREATE OR REPLACE VIEW WATCH_ROLES_PRIVS_OBJECT
AS SELECT ROLE, OWNER, TABLE_NAME, COLUMN_NAME, PRIVILEGE
FROM ROLE_TAB_PRIVS;

-- XEM QUYEN HE THONG CUA USER
CREATE OR REPLACE PROCEDURE WATCH_USER_SYS_PRIVS (
        NAME_OF_USER IN VARCHAR2,
        DISPLAY OUT SYS_REFCURSOR)
AS
        NOOU VARCHAR2(10) := NAME_OF_USER;
BEGIN
        OPEN DISPLAY FOR
        SELECT * FROM WATCH_USERS_PRIVS_SYS WHERE GRANTEE = NOOU;
        
        DBMS_SQL.RETURN_RESULT(DISPLAY);
END;


VARIABLE MYCURSOR REFCURSOR;
EXEC WATCH_USER_SYS_PRIVS('NHAN', :MYCURSOR);

----------------------------------------------------------------------------
-- XEM QUYEN DOI TUONG CUA USER
CREATE OR REPLACE PROCEDURE WATCH_USER_OBJECT_PRIVS (
        NAME_OF_USER IN VARCHAR2,
        DISPLAY OUT SYS_REFCURSOR)
AS
        NOOU VARCHAR2(10) := NAME_OF_USER;
BEGIN
        OPEN DISPLAY FOR
        SELECT * FROM WATCH_USERS_PRIVS_OBJECT  WHERE GRANTEE = NOOU;
        
        DBMS_SQL.RETURN_RESULT(DISPLAY);
END;


VARIABLE MYCURSOR REFCURSOR;
EXEC WATCH_USER_OBJECT_PRIVS('NHAN', :MYCURSOR);

----------------------------------------------------------------------------
-- XEM QUYEN HE THONG CUA ROLE
CREATE OR REPLACE PROCEDURE WATCH_ROLE_SYS_PRIVS (
        NAME_OF_ROLE IN VARCHAR2,
        DISPLAY OUT SYS_REFCURSOR)
AS
        NOOR VARCHAR2(10) := NAME_OF_ROLE;
BEGIN
        OPEN DISPLAY FOR
        SELECT * FROM WATCH_ROLES_PRIVS_SYS  WHERE ROLE = NOOR;
        
        DBMS_SQL.RETURN_RESULT(DISPLAY);
END;


VARIABLE MYCURSOR REFCURSOR;
EXEC WATCH_ROLE_SYS_PRIVS('DOCTOR', :MYCURSOR);
----------------------------------------------------------------------------
-- XEM QUYEN DOI TUONG CUA ROLE
CREATE OR REPLACE PROCEDURE WATCH_ROLE_OBJECT_PRIVS (
        NAME_OF_ROLE IN VARCHAR2,
        DISPLAY OUT SYS_REFCURSOR)
AS
        NOOR VARCHAR2(10) := NAME_OF_ROLE;
BEGIN
        OPEN DISPLAY FOR
        SELECT * FROM WATCH_ROLES_PRIVS_OBJECT  WHERE ROLE = NOOR;
        
        DBMS_SQL.RETURN_RESULT(DISPLAY);
END;


VARIABLE MYCURSOR REFCURSOR;
EXEC WATCH_ROLE_OBJECT_PRIVS('DBA', :MYCURSOR);

-- =================================================== PHAN HE 2 ===================================================
-- // VIRTUAL PRIVATE DATABASE (VPD)
-- create a role
CREATE ROLE DOCTOR; 
CREATE ROLE RECEPTION;
-- create a user
CREATE USER CONAN IDENTIFIED BY 123;
CREATE USER KRIS IDENTIFIED BY 123;
-- grant role to user
GRANT DOCTOR TO CONAN;
GRANT DOCTOR TO KRIS;
GRANT RECEPTION TO THANH, TLONG;
-- grant privileges to role
GRANT CREATE SESSION TO DOCTOR;
GRANT EXECUTE ON DBMS_RLS TO DOCTOR;
GRANT SELECT ON AD1.NHANVIEN TO DOCTOR;
GRANT SELECT, INSERT, UPDATE ON AD1.HOSOBENHAN TO DOCTOR;
GRANT SELECT ON AD1.NHANVIEN TO RECEPTION;
GRANT SELECT ON AD1.NHANVIEN TO MEDICINE;
GRANT SELECT ON AD1.NHANVIEN TO ELIZABETH;
GRANT SELECT ON AD1.NHANVIEN TO SHERLOCK;
-- GRANT SELECT, INSERT ON AD.CHITIETDICHVU TO BACSI;

-- // VPD POLICY 1: EMPLOYEES ARE ONLY ALLOWED TO VIEW THEIR OWN INFORMATION
CREATE OR REPLACE FUNCTION NHANVIEN_SELECT_SECURITY_FUNCTION (p_schema VARCHAR2, p_obj VARCHAR2)
RETURN VARCHAR2 
AS
    v_user VARCHAR(100);
BEGIN  
    v_user := SYS_CONTEXT('USERENV', 'SESSION_USER');
    return 'ACCOUNTNAME = ''' || v_user || '''';
END;

BEGIN 
    DBMS_RLS.ADD_POLICY(
    object_schema => 'AD1',
    object_name => 'NHANVIEN',
    policy_name => 'NHANVIEN_SELECT',
    function_schema => 'AD1',
    policy_function => 'NHANVIEN_SELECT_SECURITY_FUNCTION',
    statement_types => 'SELECT');
END;

SELECT * FROM AD1.NHANVIEN;

-- // VPD POLICY 2: DOCTORS CAN ONLY VIEW THEIR OWN PATIENTS' HOSOBENHAN
CREATE OR REPLACE FUNCTION HOSOBENHAN_SELECT_SECURITY_FUNCTION (p_schema VARCHAR2, p_obj VARCHAR2)
RETURN VARCHAR2 
AS
    v_user VARCHAR(100);
    v_id INT;
BEGIN  
    v_user := SYS_CONTEXT('USERENV', 'SESSION_USER');
    SELECT MANV INTO v_id
    FROM NHANVIEN
    WHERE ACCOUNTNAME = v_user;
    return 'MABS = ''' || v_id || '''';
END;

BEGIN 
    DBMS_RLS.ADD_POLICY(
    object_schema => 'AD1',
    object_name => 'HOSOBENHAN',
    policy_name => 'HOSOBENHAN_SELECT',
    function_schema => 'AD1',
    policy_function => 'HOSOBENHAN_SELECT_SECURITY_FUNCTION',
    statement_types => 'SELECT');
END;

SELECT * FROM AD1.HOSOBENHAN;

-- // VPD POLICY 3: DOCTORS CAN INSERT/ UPDATE THEIR OWN PATIENTS' HOSOBENHAN
CREATE OR REPLACE FUNCTION HOSOBENHAN_UPDATE_SECURITY_FUNCTION (p_schema VARCHAR2, p_obj VARCHAR2)
RETURN VARCHAR2 
AS
    v_user VARCHAR(100);
    v_id INT;
BEGIN  
    v_user := SYS_CONTEXT('USERENV', 'SESSION_USER');
    SELECT HS.MAKHAMBENH INTO v_id
    FROM NHANVIEN NV, HOSOBENHAN HS
    WHERE NV.ACCOUNTNAME = v_user AND NV.MANV = HS.MABS;
    return 'MAKHAMBENH = ''' || v_id || '''';
END;

BEGIN 
    DBMS_RLS.ADD_POLICY(
    object_schema => 'AD1',
    object_name => 'HOSOBENHAN',
    policy_name => 'HOSOBENHAN_UPDATE',
    function_schema => 'AD1',
    policy_function => 'HOSOBENHAN_UPDATE_SECURITY_FUNCTION',
    statement_types => 'INSERT, UPDATE',
    update_check => TRUE);
END;

UPDATE AD1.HOSOBENHAN SET TINHTRANGBANDAU = '', KETLUANCUABACSI = '' WHERE MAKHAMBENH = 407;
------------------------------------------------------------------------------------------------------------------------

-- // ENCRYPTION 
-- PACKAGE DUNG DE DINH NGHIA THUAT TOAN MA HOA DES
CREATE OR REPLACE PACKAGE Tool_DES AS
  FUNCTION encrypt (input_text  IN  VARCHAR2, key_in IN VARCHAR2) RETURN RAW;
  FUNCTION decrypt (p_raw  IN  RAW, key_in IN VARCHAR2) RETURN VARCHAR2;
END Tool_DES;

CREATE OR REPLACE PACKAGE BODY Tool_DES AS
  g_pad_chr VARCHAR2(1) := '~';

  PROCEDURE padstring (input_text  IN OUT  VARCHAR2);
  -- --------------------------------------------------
  FUNCTION encrypt (input_text  IN  VARCHAR2, key_in IN VARCHAR2) RETURN RAW IS
    g_key     RAW(32767)  := UTL_RAW.cast_to_raw(key_in);
    l_text       VARCHAR2(32767) := input_text;
    l_encrypted  RAW(32767);
  BEGIN
    padstring(l_text);
    DBMS_OBFUSCATION_TOOLKIT.desencrypt(input          => UTL_RAW.cast_to_raw(l_text),
                                        key            => g_key,
                                        encrypted_data => l_encrypted);
    RETURN l_encrypted;
  END;

  FUNCTION decrypt (p_raw  IN  RAW, key_in IN VARCHAR2) RETURN VARCHAR2 IS
    l_decrypted  VARCHAR2(32767);
    g_key   RAW(32767)  := UTL_RAW.cast_to_raw(key_in);
  BEGIN
    DBMS_OBFUSCATION_TOOLKIT.desdecrypt(input => p_raw,
                                        key   => g_key,
                                        decrypted_data => l_decrypted);
                                        
    RETURN RTrim(UTL_RAW.cast_to_varchar2(l_decrypted), g_pad_chr);
  END;

  PROCEDURE padstring (input_text  IN OUT  VARCHAR2) IS
    l_units  NUMBER;
  BEGIN
    IF LENGTH(input_text) MOD 8 > 0 THEN
      l_units := TRUNC(LENGTH(input_text)/8) + 1;
      input_text  := RPAD(input_text, l_units * 8, g_pad_chr);
    END IF;
  END;
END Tool_DES;

-- PROC MA HOA VA GIAI MA TREN BANG CHITIETDICHVU
CREATE OR REPLACE PROCEDURE MAHOA_CTDV ( 
    MAKB  CHITIETDICHVU.MAKHAMBENH%TYPE, 
    KL  CHITIETDICHVU.KETLUAN%TYPE, 
    KEY_EN in VARCHAR2)
IS
BEGIN   
    UPDATE CHITIETDICHVU SET KETLUAN=(TOOL_DES.ENCRYPT(KL,KEY_EN)) WHERE MAKHAMBENH=MAKB;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE GIAIMA_CTDV ( 
    MAKB  CHITIETDICHVU.MAKHAMBENH%TYPE,  
    KEY_EN in VARCHAR2)
    IS
    BEGIN
        UPDATE CHITIETDICHVU 
        SET KETLUAN=(TOOL_DES.DECRYPT((SELECT KETLUAN FROM CHITIETDICHVU WHERE MAKHAMBENH=MAKB),KEY_EN)) 
        WHERE MAKHAMBENH=MAKB;
        --SELECT KETLUANCUABACSI FROM HOSOBENHAN WHERE MAKHAMBENH=MAKB;
    COMMIT;
END;

ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;
CREATE USER ELIZABETH IDENTIFIED BY TRONG1234;
CREATE USER SHERLOCK IDENTIFIED BY 123;
GRANT CREATE SESSION TO ELIZABETH, SHERLOCK;
GRANT EXECUTE ANY PROCEDURE TO ELIZABETH, SHERLOCK;
GRANT SELECT ON CHITIETDICHVU TO ELIZABETH, SHERLOCK;
GRANT UPDATE ON CHITIETDICHVU TO ELIZABETH, SHERLOCK;
EXECUTE AD1.MAHOA_CTDV (401,'GAN PHU NE','TRONG1234');
EXECUTE MAHOA_CTDV (402,'MO MAU NHIEU','TRONG1234');
EXECUTE MAHOA_CTDV (403,'DA DAY BINH THUONH','12345678');
EXECUTE MAHOA_CTDV (400,'GAN BINH THUONG','12345678');
EXECUTE AD1.GIAIMA_CTDV (401,'TRONG1234');

SELECT * FROM AD1.chitietdichvu
------------------------------------------------------------------------------------------------------------------------

-- // ORACLE LABEL SECURITY 
-- // SETUP
SELECT STATUS FROM DBA_OLS_STATUS WHERE NAME = 'OLS_DIRECTORY_STATUS';
ALTER USER LBACSYS IDENTIFIED BY LBACSYS ACCOUNT UNLOCK;
EXEC LBACSYS.CONFIGURE_OLS;
EXEC LBACSYS.OLS_ENFORCEMENT.ENABLE_OLS; -- OLS is enabled

SELECT value FROM V$OPTION WHERE parameter = 'Oracle Label Security'; -- value = TRUE, it's OK here

ALTER USER LBACSYS IDENTIFIED BY 123;

-- CHINH SACH BAO MAT (AP DUNG OLS): NHAN VIEN TIEP TAN CHI DUOC XEM THONG TIN HOA DON MA MINH PHU TRACH
GRANT SELECT ANY DICTIONARY TO LBACSYS;
GRANT INHERIT PRIVILEGES ON USER SYS TO LBACSYS;

-- TAO CHINH SACH OLS
-- Dung user LBACSYS/123
BEGIN
sa_sysdba.create_policy(policy_name => 'OLS_PROJECT', column_name => 'CO_LUMN');
END;

SELECT * FROM dba_sa_policies;

EXEC SA_SYSDBA.ENABLE_POLICY ('OLS_PROJECT');

-- DINH NGHIA LABEL
EXECUTE sa_components.create_level(policy_name => 'OLS_PROJECT', long_name => 'Sensitive', short_name => 'S', level_num => 20);
EXECUTE sa_components.create_level(policy_name => 'OLS_PROJECT', long_name => 'Confidential', short_name => 'C', level_num => 10);

-- TAO GROUP
EXECUTE sa_components.create_group(policy_name => 'OLS_PROJECT', group_num => 210, short_name => 'TT19', long_name => 'Tiep tan 19');
EXECUTE sa_components.create_group(policy_name => 'OLS_PROJECT', group_num => 220, short_name => 'TT24', long_name => 'Tiep tan 24');

-- DINH NGHIA COMPARTMENT
EXECUTE sa_components.create_compartment(policy_name => 'OLS_PROJECT', comp_num => 65, short_name => 'T19', long_name => 'TTa19');
EXECUTE sa_components.create_compartment(policy_name => 'OLS_PROJECT', comp_num => 55, short_name => 'T24', long_name => 'TTa24');

-- TAO CAC NHAN DU LIEU
EXECUTE sa_label_admin.create_label(policy_name => 'OLS_PROJECT', label_tag => 160, label_value => 'S:T19:TT19');
EXECUTE sa_label_admin.create_label(policy_name => 'OLS_PROJECT', label_tag => 170, label_value => 'C:T24:TT24');

-- AP DUNG CHINH SACH AN TOAN OLS CHO BANG HOADON
BEGIN
SA_POLICY_ADMIN.APPLY_TABLE_POLICY (
policy_name => 'OLS_PROJECT', 
schema_name => 'AD1', 
table_name => 'HOADON', 
table_options => 'LABEL_DEFAULT, READ_CONTROL, WRITE_CONTROL');
END;

-- DANG NHAP SQLDEV = SYS/admin123456
GRANT EXECUTE ON CHAR_TO_LABEL TO AD1;

SELECT * FROM AD1.HOADON;

UPDATE AD1.HOADON SET CO_LUMN = CHAR_TO_LABEL('OLS_PROJECT', 'S:T19:TT19') WHERE NVPHUTRACH = 19 AND MAKHAMBENH = 400;
UPDATE AD1.HOADON SET CO_LUMN = CHAR_TO_LABEL('OLS_PROJECT', 'S:T19:TT19') WHERE NVPHUTRACH = 19 AND MAKHAMBENH = 401;
UPDATE AD1.HOADON SET CO_LUMN = CHAR_TO_LABEL('OLS_PROJECT', 'S:T19:TT19') WHERE NVPHUTRACH = 19 AND MAKHAMBENH = 402;
UPDATE AD1.HOADON SET CO_LUMN = CHAR_TO_LABEL('OLS_PROJECT', 'S:T19:TT19') WHERE NVPHUTRACH = 19 AND MAKHAMBENH = 403;
UPDATE AD1.HOADON SET CO_LUMN = CHAR_TO_LABEL('OLS_PROJECT', 'S:T19:TT19') WHERE NVPHUTRACH = 19 AND MAKHAMBENH = 405;

UPDATE AD1.HOADON SET CO_LUMN = CHAR_TO_LABEL('OLS_PROJECT', 'C:T24:TT24') WHERE NVPHUTRACH = 24 AND MAKHAMBENH = 404;
UPDATE AD1.HOADON SET CO_LUMN = CHAR_TO_LABEL('OLS_PROJECT', 'C:T24:TT24') WHERE NVPHUTRACH = 24 AND MAKHAMBENH = 405;

-- TAO CAC NGUOI DUNG
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;
CREATE USER TLONG IDENTIFIED BY 123;
GRANT UNLIMITED TABLESPACE TO TLONG;
GRANT CREATE SESSION TO TLONG;

CREATE USER THANH IDENTIFIED BY 123;
GRANT UNLIMITED TABLESPACE TO THANH;
GRANT CREATE SESSION TO THANH;

-- GAN QUYEN CHO NGUOI DUNG
GRANT SELECT, INSERT, UPDATE, DELETE ON AD1.HOADON TO TLONG;
GRANT SELECT, INSERT, UPDATE, DELETE ON AD1.HOADON TO THANH;

-- GAN NHAN CHO NGUOI DUNG
EXECUTE sa_user_admin.set_user_labels(policy_name => 'OLS_PROJECT', user_name => 'TLONG', max_read_label => 'S:T19:TT19', max_write_label => 'S:T19:TT19', min_write_label => 'C', def_label => 'S:T19:TT19', row_label => 'S:T19:TT19');
EXECUTE sa_user_admin.set_user_labels(policy_name => 'OLS_PROJECT', user_name => 'THANH', max_read_label => 'C:T24:TT24', max_write_label => 'C:T24:TT24', min_write_label => 'C', def_label => 'C:T24:TT24', row_label => 'C:T24:TT24');


-- DANG NHAP TAI KHOAN DE CHECK CHINH SACH OLS
SELECT * FROM AD1.HOADON;
------------------------------------------------------------------------------------------------------------------------

-- // AUDITING 
CREATE USER NHAN IDENTIFIED BY 123;
CREATE USER HAIBARA IDENTIFIED BY 123;
CREATE ROLE MEDICINE;
GRANT MEDICINE TO NHAN, HAIBARA;
GRANT CREATE SESSION, DBA, RESOURCE, CONNECT TO MEDICINE;
GRANT CREATE PROCEDURE TO MEDICINE;
GRANT EXECUTE ANY PROCEDURE TO MEDICINE;
GRANT SELECT, INSERT, UPDATE, DELETE ON THUOC TO MEDICINE; 
GRANT SELECT, INSERT, UPDATE, DELETE ON DICHVU TO ELIZABETH, SHERLOCK; 
GRANT SELECT, INSERT, UPDATE, DELETE ON BENHNHAN TO RECEPTION; 
GRANT SELECT, UPDATE ON THUOC TO MEDICINE; 

-- Audit: GIAM SAT NHUNG TRUY CAP TREN BANG DICHVU
-- AUDIT SELECT, INSERT, UPDATE, DELETE ON DICHVU BY ACCESS;
AUDIT SELECT, INSERT, UPDATE, DELETE ON DICHVU BY ACCESS WHENEVER SUCCESSFUL;
AUDIT SELECT, INSERT, UPDATE, DELETE ON DICHVU BY ACCESS WHENEVER NOT SUCCESSFUL;

-- Audit:  GIAM SAT NHUNG TRUY CAP TREN BANG BENHNHEN
AUDIT SELECT, INSERT, UPDATE, DELETE ON BENHNHAN BY ACCESS WHENEVER SUCCESSFUL;
AUDIT SELECT, INSERT, UPDATE, DELETE ON BENHNHAN BY ACCESS WHENEVER NOT SUCCESSFUL;

-- DANG NHAP = ACC ELIZABETH/ SHERLOCK
SELECT * FROM AD1.DICHVU;

-- DANG NHAP = ACC THANH/ TLONG
SELECT * FROM AD1.BENHNHAN;

-- KIEM TRA 2 CHINH SACH AUDIT  (DANG NHAP = AD1)
SELECT USERNAME, EXTENDED_TIMESTAMP, OWNER, OBJ_NAME, ACTION_NAME
FROM DBA_AUDIT_TRAIL
WHERE OWNER = 'AD1' -- SCHEMA CHUA BANG 
ORDER BY TIMESTAMP;

-- FGA1: GIAM SAT NHUNG TRUY CAP TREN BANG THUOC
-- AD1:
BEGIN
         DBMS_FGA.ADD_POLICY (
                OBJECT_SCHEMA           => 'AD1',
                OBJECT_NAME               => 'THUOC',
                POLICY_NAME               => 'AUDIT_THUOC',
                ENABLE                          => TRUE,
                STATEMENT_TYPES     => 'SELECT, INSERT, UPDATE, DELETE',
                AUDIT_COLUMN            => 'MATHUOC, DONGIA, LUUY'
         );
END;
/

EXEC grant_sys_role('MEDICINE', 'CREATE SESSION', 'NO');
EXEC grant_privs_obj_role('MEDICINE', 'SELECT', 'THUOC');
EXEC grant_privs_obj_role('MEDICINE', 'INSERT', 'THUOC');
EXEC grant_privs_obj_role('MEDICINE', 'UPDATE', 'THUOC');
EXEC grant_privs_obj_role('MEDICINE', 'DELETE', 'THUOC');

-- NHAN/123 
SELECT * FROM AD1.THUOC;

-- THEM 1 THUOC
-- INSERT INTO AD1.THUOC VALUES (105, 'THUOC DA DAY', 'HOP', 120000, NULL);

CREATE OR REPLACE PROCEDURE INSERT_INTO_THUOC(
        MTHUOC          THUOC.MATHUOC%TYPE, 
        NAMETHUOC   THUOC.TENTHUOC%TYPE, 
        DVT                   THUOC.DONVITINH%TYPE,
        DG                     THUOC.DONGIA%TYPE,
        NOTE                THUOC.LUUY%TYPE)
IS
BEGIN
        INSERT INTO THUOC (MATHUOC, TENTHUOC, DONVITINH, DONGIA, LUUY)
        VALUES (MTHUOC, NAMETHUOC, DVT, DG, NOTE);
        COMMIT;
END;
/
EXEC AD1.INSERT_INTO_THUOC(105, 'THUOC DA DAY', 'HOP', 120000, NULL);
EXEC INSERT_INTO_THUOC('106', 'THUOC DAU BUNG', 'HOP', 80000, NULL);

-- UPDATE
UPDATE AD1.THUOC SET LUUY = 'ABC' WHERE MATHUOC = 105;

-- AD1 CHECK THONG TIN AUDIT
SELECT * FROM DBA_FGA_AUDIT_TRAIL;

-- FGA2: GIAM SAT NHUNG TRUY CAP TREN BANG HOSOBENHAN
-- AD1:
BEGIN
         DBMS_FGA.ADD_POLICY (
                OBJECT_SCHEMA           => 'AD1',
                OBJECT_NAME               => 'HOSOBENHAN',
                POLICY_NAME               => 'AUDIT_HSBA',
                ENABLE                          => TRUE,
                STATEMENT_TYPES     => 'SELECT, UPDATE, DELETE',
                AUDIT_COLUMN            => 'MABS, TINHTRANGBANDAU, KETLUANCUABACSI'
         );
END;

SELECT * FROM AD1.HOSOBENHAN;
UPDATE AD1.HOSOBENHAN SET TINHTRANGBANDAU = 'HO', KETLUANCUABACSI = 'SOT XUAT HUYET' WHERE MAKHAMBENH = 407;

-- AD1 CHECK THONG TIN AUDIT
SELECT * FROM DBA_FGA_AUDIT_TRAIL;

-- CHECK XEM AUDIT POLICIES DA TON TAI CHUA
SELECT * FROM DBA_AUDIT_POLICIES;